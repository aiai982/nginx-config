# App-specific config file located at /etc/nginx/sites-available/app-name.conf

# References:
# https://github.com/dreamerslab/nodejs.production/blob/master/multi_instance/nginx/vhost.conf
# https://www.digitalocean.com/community/tutorials/how-to-deploy-a-meteor-js-application-on-ubuntu-14-04-with-nginx
# http://aws.amazon.com/articles/1233/
# https://gist.github.com/plentz/6737338
# http://refspecs.linuxfoundation.org/FHS_2.3/fhs-2.3.pdf

# Server listening on port 80 for any requests and redirecting all of them to
# port 443 so that all requests are encrypted.
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites
server {
  listen 80;
  server_name www.app-name.com;

  location / {
    return 301 https://$server_name$request_uri;
  }
}

# Set of upstream servers the reverse proxy. Define multiple servers here if
# setting up a horizontal-scaling load-balanced setup.
upstream app_app-name_upstream {
  server 127.0.0.1:4010;
}

# SSL server
#
# NOTE file hierarchy conventions:
# Static assets are served from /srv/opt/app-name
# Configuration files are stored in /etc/opt/app-name
# Log files are stored in /var/opt/app-name
# Application files are stored in /opt/app-name
server {
  listen 443 ssl spdy;
  server_name www.app-name.com;
  root /srv/opt/app-name;
  index index.html;

  charset utf-8;

  # SSL Certificates
  # Manually generated dhparam with:
  # `openssl dhparam -out /etc/nginx/ssl/certs/dhparam.pem 4096`
  ssl on;
  ssl_certificate /etc/nginx/ssl/certs/app-name.crt;
  ssl_certificate_key /etc/nginx/ssl/private/app-name.key;
  ssl_dhparam /etc/nginx/ssl/certs/dhparam.pem;

  # Safety enhancement to SSL: make sure we actually use a safe cipher, and only use TLS.
  # Ciphers recommended by Mozzila: https://wiki.mozilla.org/Security/Server_Side_TLS
  # Also see http://security.stackexchange.com/questions/54639/recommended-ssl-ciphers-for-security-compatibility-perfect-forward-secrecy
  # As well as list recommended by acme-tiny: https://github.com/diafygi/acme-tiny
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

  # Enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
  # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /etc/nginx/ssl/certs/app-name.crt;
  resolver 8.8.8.8 8.8.4.4 valid=300s;
  resolver_timeout 10s;

  ssl_session_cache shared:SSL:50m;
  ssl_session_timeout 5m;

  # Config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # To avoid SSL stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  add_header Strict-Transport-Security "max-age=31536000;";

  # Cache static files forever (requires renaming them if they change).
  # I'm using a "rev" build task to rename files with contents' hash found in
  # https://github.com/robmclarty/gulp-tasks
  location ~* .(jpg|jpeg|png|gif|ico|css|js|woff|woff2|eot|svg|ttf|txt) {
    access_log off;
    log_not_found off;
    expires max;
  }

  # Match /app* to the single page app at /app/index.html and let the app's
  # router handle the uri.
  location ~* ^/app(.*)$ {
    try_files /app/index.html =404;
  }

  # Try serving static assets first, before passing to the app layer. Nginx can
  # serve static files orders of magnitude faster than Nodejs can.
  # This says "try finding a matching file, if that doesn't work, try finding
  # a matching directory, finally if all else fails, pass to proxy" which in
  # this case is a Nodejs app.
  # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites
  location / {
    try_files $uri @proxy;
  }

  # Pass requests for dynamic content to Nodejs application.
  location @proxy {
    # Turn off X-Powered-By header.
    proxy_hide_header X-Powered-By;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Enable the following to support websocket requests (not necessary if not
    # using websockets).
    # proxy_http_version 1.1;
    # proxy_set_header Upgrade $http_upgrade; # allow websockets
    # proxy_set_header Connection 'upgrade';
    # proxy_cache_bypass $http_upgrade;

    # Don't need https when talking to Nodejs as Nginx is proxying SSL traffic
    # and handling encryption itself, above the application layer.
    # http://stackoverflow.com/questions/10375659/nginx-proxy-pass-node-ssl
    proxy_pass http://app_app-name_upstream; # match `upstream` name defined above
    proxy_redirect off;
  }
}
